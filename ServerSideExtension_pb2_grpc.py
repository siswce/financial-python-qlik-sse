# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import ServerSideExtension_pb2 as ServerSideExtension__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in ServerSideExtension_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ConnectorStub(object):
    """*
    The communication service provided between the Qlik engine and the plugin.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCapabilities = channel.unary_unary(
                '/qlik.sse.Connector/GetCapabilities',
                request_serializer=ServerSideExtension__pb2.Empty.SerializeToString,
                response_deserializer=ServerSideExtension__pb2.Capabilities.FromString,
                _registered_method=True)
        self.ExecuteFunction = channel.stream_stream(
                '/qlik.sse.Connector/ExecuteFunction',
                request_serializer=ServerSideExtension__pb2.BundledRows.SerializeToString,
                response_deserializer=ServerSideExtension__pb2.BundledRows.FromString,
                _registered_method=True)
        self.EvaluateScript = channel.stream_stream(
                '/qlik.sse.Connector/EvaluateScript',
                request_serializer=ServerSideExtension__pb2.BundledRows.SerializeToString,
                response_deserializer=ServerSideExtension__pb2.BundledRows.FromString,
                _registered_method=True)


class ConnectorServicer(object):
    """*
    The communication service provided between the Qlik engine and the plugin.
    """

    def GetCapabilities(self, request, context):
        """/ A handshake call for the Qlik engine to retrieve the capability of the plugin.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteFunction(self, request_iterator, context):
        """/ Requests a function to be executed as specified in the header.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EvaluateScript(self, request_iterator, context):
        """/ Requests a script to be evaluated as specified in the header.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConnectorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCapabilities': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCapabilities,
                    request_deserializer=ServerSideExtension__pb2.Empty.FromString,
                    response_serializer=ServerSideExtension__pb2.Capabilities.SerializeToString,
            ),
            'ExecuteFunction': grpc.stream_stream_rpc_method_handler(
                    servicer.ExecuteFunction,
                    request_deserializer=ServerSideExtension__pb2.BundledRows.FromString,
                    response_serializer=ServerSideExtension__pb2.BundledRows.SerializeToString,
            ),
            'EvaluateScript': grpc.stream_stream_rpc_method_handler(
                    servicer.EvaluateScript,
                    request_deserializer=ServerSideExtension__pb2.BundledRows.FromString,
                    response_serializer=ServerSideExtension__pb2.BundledRows.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'qlik.sse.Connector', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('qlik.sse.Connector', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Connector(object):
    """*
    The communication service provided between the Qlik engine and the plugin.
    """

    @staticmethod
    def GetCapabilities(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qlik.sse.Connector/GetCapabilities',
            ServerSideExtension__pb2.Empty.SerializeToString,
            ServerSideExtension__pb2.Capabilities.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteFunction(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/qlik.sse.Connector/ExecuteFunction',
            ServerSideExtension__pb2.BundledRows.SerializeToString,
            ServerSideExtension__pb2.BundledRows.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EvaluateScript(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/qlik.sse.Connector/EvaluateScript',
            ServerSideExtension__pb2.BundledRows.SerializeToString,
            ServerSideExtension__pb2.BundledRows.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
